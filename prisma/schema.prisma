// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db { // Prisma에게 데이터베이스의 주소(url)와 종류(provider)에 대해 알려주는 것이다. 
  provider = "postgresql"
  url      = env("DATABASE_URL")   
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())
  firstName String  
  lastName String?
  userName String @unique 
  email String @unique 
  password String 
  bio String?
  avatar String? // 프로필 이미지 
  photos Photo[]
  followers User[] @relation("FollowRelation", references: [id])
  following User[] @relation("FollowRelation", references: [id])
  likes Like[]
  comments Comment[]
  rooms    Room[]     // 유저가 여러 대화방에 들어갈 수 있게 한다.
  messages Message[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Photo {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references:[id])
  userId Int
  file String
  caption String?
  hashtags Hashtag[] 
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  likes Like[]
  comments Comment[]
}

model Hashtag {
    id Int @id @default(autoincrement())
    hashtag String @unique
    photos Photo[]
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Like {
    id Int @id @default(autoincrement())
    photo Photo @relation(fields: [photoId], references: [id])
    user User @relation(fields: [userId], references: [id])
    photoId Int 
    userId Int
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    @@unique([photoId, userId])  // 좋아요를 2번 누를 수 없게 유니크 처리하는 것이다.
}

model Comment {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id])
    photo Photo @relation(fields: [photoId], references: [id])
    payload String
    userId Int 
    photoId Int
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Room {
    id Int @id @default(autoincrement())
    users User[]
    Message Message[]
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Message {
    id Int @id @default(autoincrement())
    payload String 
    user User @relation(fields: [userId], references: [id])
    userId Int
    room Room @relation(fields: [roomId], references: [id])
    roomId Int
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}